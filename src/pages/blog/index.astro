---
import BaseLayout from '../../layouts/BaseLayout.astro'
import { getBlogPosts } from '../../lib/notion'
import type { BlogPost } from '../../lib/notion'
import { Calendar, Edit } from 'lucide-react'

let posts: BlogPost[] = []
try {
  posts = await getBlogPosts()
} catch (error) {
  console.error('Error loading blog posts:', error)
}

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}
---

<BaseLayout title="Blog | Baladithya B">
  <main class="container mx-auto px-4 py-8">
    <h1 class="mb-8 text-4xl font-bold text-gray-900 dark:text-white">
      Blog Posts
    </h1>
    {
      posts.length === 0 ? (
        <p class="text-center text-gray-600 dark:text-gray-400">
          No blog posts available at the moment.
        </p>
      ) : (
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {posts.map((post) => (
            <div class="blog-card-container">
              <a
                href={`/blog/${post.id}`}
                class="blog-card block overflow-hidden rounded-lg border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800"
                data-astro-prefetch
              >
                <div class="flex h-full flex-col p-4 transition-all duration-300">
                  <h2 class="mb-2 text-xl font-semibold text-gray-900 transition-colors group-hover:text-primary dark:text-gray-100">
                    {post.title}
                  </h2>
                  <div class="mb-2 flex flex-wrap gap-x-4 gap-y-1 text-sm text-gray-600 dark:text-gray-400">
                    <div class="flex items-center gap-1">
                      <Calendar className="h-4 w-4" />
                      <span>{formatDate(post.createdTime)}</span>
                    </div>
                    <div class="flex items-center gap-1">
                      <Edit className="h-4 w-4" />
                      <span>{formatDate(post.lastEditedTime)}</span>
                    </div>
                  </div>
                  <div class="description-container relative flex-grow rounded-md transition-all duration-300">
                    <div class="text-gray-700 dark:text-gray-300 blog-preview" set:html={post.description}></div>
                    <div class="mt-4 text-sm font-medium text-primary">Read more â†’</div>
                  </div>
                </div>
              </a>
            </div>
          ))}
        </div>
      )
    }
  </main>
</BaseLayout>

<script>
  // Handle clicks on preview links
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;

    // Check if the clicked element is a notion-link-preview or a child of it
    const linkPreview = target.closest('.notion-link-preview');

    if (linkPreview) {
      // Prevent the default action (navigating to the blog post)
      event.preventDefault();
      event.stopPropagation();

      // Get the href from the data attribute
      const href = linkPreview.getAttribute('data-href');

      if (href) {
        // Open the link in a new tab
        window.open(href, '_blank', 'noopener,noreferrer');
      }
    }
  });
</script>

<style is:global>
  .blog-preview {
    line-height: 1.5;
    margin-bottom: 1rem;
  }

  /* Style for links in previews */
  .notion-link-preview {
    color: hsl(var(--primary));
    text-decoration: underline;
    font-weight: 500;
    cursor: pointer;
  }

  .description-container a {
    color: hsl(var(--primary));
    text-decoration: underline;
    font-weight: 500;
  }

  .description-container strong {
    color: var(--foreground);
    font-weight: 600;
  }

  .description-container em {
    font-style: italic;
  }

  .description-container code {
    color: hsl(var(--primary));
    background-color: hsl(var(--muted));
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    font-size: 0.875em;
  }
</style>

<style>
  .blog-card-container {
    position: relative;
    height: 240px;
    perspective: 1000px;
    transition: height 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    transition-delay: 0.05s;
    contain: layout style;
    will-change: height;
  }

  .blog-card-container:hover {
    height: 380px;
  }

  .blog-card {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
    transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    transition-delay: 0.05s;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    contain: layout style;
    will-change: transform, box-shadow;
  }

  .blog-card:hover {
    transform: translateY(-24px) scale(1.08);
    box-shadow: 0 30px 60px rgba(0, 0, 0, 0.25);
    z-index: 20;
  }

  .description-container {
    max-height: 6.5em;
    overflow: hidden;
    transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    transition-delay: 0.05s;
    padding: 0.5rem;
    border-radius: 3px;
    contain: layout style;
    will-change: max-height, background-color;
  }

  .blog-card:hover .description-container {
    max-height: 225px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
    background-color: rgba(0, 0, 0, 0.05);
  }

  /* Custom scrollbar for Webkit browsers */
  .description-container::-webkit-scrollbar {
    width: 6px;
  }

  .description-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .description-container::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .blog-card-container,
    .blog-card,
    .description-container {
      transition-duration: 0.1s;
      transition-delay: 0s;
    }

    .blog-card:hover {
      transform: translateY(-12px) scale(1.04);
    }
  }
</style>
